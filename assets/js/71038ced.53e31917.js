"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[865],{3905:function(e,a,t){t.d(a,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=r.createContext({}),p=function(e){var a=r.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=p(e.components);return r.createElement(l.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=p(t),u=n,d=g["".concat(l,".").concat(u)]||g[u]||m[u]||o;return t?r.createElement(d,i(i({ref:a},c),{},{components:t})):r.createElement(d,i({ref:a},c))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4704:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=t(7462),n=t(3366),o=(t(7294),t(3905)),i=["components"],s={sidebar_position:3,sidebar_label:"Examples"},l={unversionedId:"api/examples",id:"api/examples",isDocsHomePage:!1,title:"Examples",description:"Here are small code snippets in a question-answer format for start to interact with the main Gear component.",source:"@site/docs/api/examples.md",sourceDirName:"api",slug:"/api/examples",permalink:"/api/examples",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/api/examples.md",version:"current",sidebar_label:"Examples",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Examples"},sidebar:"tutorialSidebar",previous:{title:"Ussing CLI",permalink:"/api/cli"},next:{title:"Gear IDEA online",permalink:"/tools/online-idea"}},p=[{value:"Subscribing",id:"subscribing",children:[]},{value:"Creating custom types",id:"creating-custom-types",children:[]},{value:"Create keyring",id:"create-keyring",children:[]},{value:"Getting metadata",id:"getting-metadata",children:[]},{value:"Uploading program",id:"uploading-program",children:[]},{value:"Sending message",id:"sending-message",children:[]},{value:"Examples",id:"examples",children:[]}],c={toc:p};function m(e){var a=e.components,t=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Here are small code snippets in a question-answer format for start to interact with the main Gear component."),(0,o.kt)("h3",{id:"subscribing"},"Subscribing"),(0,o.kt)("p",null,"Subscribe to all events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"gearApi.events((event) => {\n  console.log(event.toHuman());\n});\n")),(0,o.kt)("p",null,"Subscribe to Log events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"gearApi.gearEvents.subscribeLogEvents((event) => {\n  const data: any = event.data[0].toHuman();\n  console.log(data);\n});\n")),(0,o.kt)("p",null,"Subscribe to Program events"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"gearApi.gearEvents.subsribeProgramEvents((event) => {\n  console.log(event.toHuman());\n});\n")),(0,o.kt)("h3",{id:"creating-custom-types"},"Creating custom types"),(0,o.kt)("p",null,"Use types that were registered at the time of creating the API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const createType = new CreateType(gearApi);\n")),(0,o.kt)("p",null,"And without them"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const createType = new CreateType();\n")),(0,o.kt)("p",null,"Encode data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// If \"TypeName\" alredy registred\ncreateType.encode('TypeName', somePayload);\n// Otherwise need to add metadata containing TypeName and all required types\ncreateType.encode('TypeName', somePayload, metadata);\n")),(0,o.kt)("p",null,"By analogy data is decoded"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"createType.decode('TypeName', someBytes);\n// or\ncreateType.decode('TypeName', someBytes, metadata);\n")),(0,o.kt)("h3",{id:"create-keyring"},"Create keyring"),(0,o.kt)("p",null,"Creating a new keyring"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { GearKeyring } from '@gear-js/api';\nconst { keyring, json } = await GearKeyring.create('keyringName');\n")),(0,o.kt)("p",null,"Getting a keyring from JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const jsonKeyring = fs.readFileSync('path/to/keyring.json').toString();\nconst keyring = GearKeyring.fromJson(jsonKeyring);\n")),(0,o.kt)("h3",{id:"getting-metadata"},"Getting metadata"),(0,o.kt)("p",null,"Getting metadata from program.meta.wasm"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { getWasmMetadata } from '@gear-js/api';\nconst fileBuffer = fs.readFileSync('path/to/program.meta.wasm');\nconst meta = await getWasmMetadata(fileBuffer);\n")),(0,o.kt)("h3",{id:"uploading-program"},"Uploading program"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const code = fs.readFileSync('path/to/program.wasm');\n\nconst uploadProgram = {\n  code,\n  gasLimit: 1000000,\n  value: 1000,\n  initPayload: somePayload\n};\n\ntry {\n  const programId = await gearApi.program.submit(uploadProgram, meta);\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n\ntry {\n  await gearApi.program.signAndSend(keyring, (data) => {\n    console.log(data);\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n")),(0,o.kt)("h3",{id:"sending-message"},"Sending message"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n  const message = {\n    destination: destination, // programId\n    payload: somePayload,\n    gasLimit: 10000000,\n    value: 1000\n  };\n  await gearApi.message.submit(message, meta);\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\ntry {\n  await gearApi.message.signAndSend(keyring, (data) => {\n    console.log(data);\n  });\n} catch (error) {\n  console.error(`${error.name}: ${error.message}`);\n}\n")),(0,o.kt)("h2",{id:"examples"},(0,o.kt)("a",{parentName:"h2",href:"https://github.com/gear-tech/gear-js-lib/tree/master/examples"},"Examples")),(0,o.kt)("p",null,"To run examples see ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/gear-js-lib/tree/master/examples"},"https://github.com/gear-tech/gear-js-lib/tree/master/examples")))}m.isMDXComponent=!0}}]);